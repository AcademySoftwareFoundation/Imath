# SPDX-License-Identifier: BSD-3-Clause
# Copyright Contributors to the OpenEXR Project.
#
# GitHub Actions workflow file
# https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions

name: CI

on:
  push:
    # Jobs are skipped when ONLY Markdown (*.md) files are changed
    paths-ignore:
      - '**.md'
  pull_request:
    paths-ignore:
      - '**.md'

jobs:
  # Linux jobs run in Docker containers, so the latest OS version is OK. macOS 
  # and Windows jobs need to be locked to specific virtual environment 
  # versions to mitigate issues from OS updates, and will require maintenance 
  # as OS versions are retired.
  #
  # GH Actions (Free plan) supports 20 concurrent jobs, with 5 concurrent macOS 
  # jobs. This workflow tries to utilize (but not exceed) that budget to 
  # promote timely CI.

  # ---------------------------------------------------------------------------
  # Linux
  # ---------------------------------------------------------------------------
  # TODO: Add ARM build. Add sanitize build.

  linux:
    name: 'Linux CentOS 7 VFX CY${{ matrix.vfx-cy }} 
      <${{ matrix.compiler-desc }} 
       config=${{ matrix.build-type }}, 
       shared=${{ matrix.build-shared }}, 
       cxx=${{ matrix.cxx-standard }}>'
    # GH-hosted VM. The build runs in CentOS 7 'container' defined below.
    runs-on: ubuntu-latest
    container:
      # DockerHub: https://hub.docker.com/u/aswf
      # Source: https://github.com/AcademySoftwareFoundation/aswf-docker
      image: aswf/ci-openexr:${{ matrix.vfx-cy }}
    strategy:
      matrix:
        build: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]
        include:
          # -------------------------------------------------------------------
          # GCC, VFX CY2021
          # -------------------------------------------------------------------
          # C++11, Python 3.7
          - build: 11
            build-type: Release
            build-shared: 'ON'
            cxx-standard: 11
            cxx-compiler: g++
            cc-compiler: gcc
            compiler-desc: GCC 6.3.1
            vfx-cy: 2021
          # Debug
          - build: 12
            build-type: Debug
            build-shared: 'ON'
            cxx-standard: 11
            cxx-compiler: g++
            cc-compiler: gcc
            compiler-desc: GCC 6.3.1
            vfx-cy: 2021
          # C++14
          - build: 13
            build-type: Release
            build-shared: 'ON'
            cxx-standard: 14
            cxx-compiler: g++
            cc-compiler: gcc
            compiler-desc: GCC 6.3.1
            vfx-cy: 2021
          # Static
          - build: 14
            build-type: Release
            build-shared: 'OFF'
            cxx-standard: 11
            cxx-compiler: g++
            cc-compiler: gcc
            compiler-desc: GCC 6.3.1
            vfx-cy: 2021
          # -------------------------------------------------------------------
          # GCC, VFX CY2020
          # -------------------------------------------------------------------
          # C++11, Python 3.7
          - build: 1
            build-type: Release
            build-shared: 'ON'
            cxx-standard: 11
            cxx-compiler: g++
            cc-compiler: gcc
            compiler-desc: GCC 6.3.1
            vfx-cy: 2020
          # Debug
          - build: 2
            build-type: Debug
            build-shared: 'ON'
            cxx-standard: 11
            cxx-compiler: g++
            cc-compiler: gcc
            compiler-desc: GCC 6.3.1
            vfx-cy: 2020
          # C++14
          - build: 3
            build-type: Release
            build-shared: 'ON'
            cxx-standard: 14
            cxx-compiler: g++
            cc-compiler: gcc
            compiler-desc: GCC 6.3.1
            vfx-cy: 2020
          # Static
          - build: 4
            build-type: Release
            build-shared: 'OFF'
            cxx-standard: 11
            cxx-compiler: g++
            cc-compiler: gcc
            compiler-desc: GCC 6.3.1
            vfx-cy: 2020
          # -------------------------------------------------------------------
          # GCC, VFX CY2019
          # -------------------------------------------------------------------
          # Python 2.7
          - build: 5
            build-type: Release
            build-shared: 'ON'
            use-python2: 'ON'
            cxx-standard: 11
            cxx-compiler: g++
            cc-compiler: gcc
            compiler-desc: GCC 6.3.1
            vfx-cy: 2019
          # -------------------------------------------------------------------
          # Clang, VFX CY2021
          # -------------------------------------------------------------------
          # C++11, Python 3.7
          - build: 15
            build-type: Release
            build-shared: 'ON'
            cxx-standard: 11
            cxx-compiler: clang++
            cc-compiler: clang
            compiler-desc: Clang 7
            vfx-cy: 2021
          # Debug
          - build: 16
            build-type: Debug
            build-shared: 'ON'
            cxx-standard: 11
            cxx-compiler: clang++
            cc-compiler: clang
            compiler-desc: Clang 7
            vfx-cy: 2021
          # C++14
          - build: 17
            build-type: Release
            build-shared: 'ON'
            cxx-standard: 14
            cxx-compiler: clang++
            cc-compiler: clang
            compiler-desc: Clang 7
            vfx-cy: 2021
          # Static
          - build: 18
            build-type: Release
            build-shared: 'OFF'
            cxx-standard: 11
            cxx-compiler: clang++
            cc-compiler: clang
            compiler-desc: Clang 7
            vfx-cy: 2021
          # -------------------------------------------------------------------
          # Clang, VFX CY2020
          # -------------------------------------------------------------------
          # C++11, Python 3.7
          - build: 6
            build-type: Release
            build-shared: 'ON'
            cxx-standard: 11
            cxx-compiler: clang++
            cc-compiler: clang
            compiler-desc: Clang 7
            vfx-cy: 2020
          # Debug
          - build: 7
            build-type: Debug
            build-shared: 'ON'
            cxx-standard: 11
            cxx-compiler: clang++
            cc-compiler: clang
            compiler-desc: Clang 7
            vfx-cy: 2020
          # C++14
          - build: 8
            build-type: Release
            build-shared: 'ON'
            cxx-standard: 14
            cxx-compiler: clang++
            cc-compiler: clang
            compiler-desc: Clang 7
            vfx-cy: 2020
          # Static
          - build: 9
            build-type: Release
            build-shared: 'OFF'
            cxx-standard: 11
            cxx-compiler: clang++
            cc-compiler: clang
            compiler-desc: Clang 7
            vfx-cy: 2020
          # -------------------------------------------------------------------
          # Clang, VFX CY2019
          # -------------------------------------------------------------------
          # Python 2.7
          - build: 10
            build-type: Release
            build-shared: 'ON'
            use-python2: 'ON'
            cxx-standard: 11
            cxx-compiler: clang++
            cc-compiler: clang
            compiler-desc: Clang 7
            vfx-cy: 2019
    env:
      CXX: ${{ matrix.cxx-compiler }}
      CC: ${{ matrix.cc-compiler }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Create build directories
        run: |
          mkdir _install
          mkdir _build
          mkdir _examples
      - name: Configure
        run: |
          cmake .. \
                -DCMAKE_INSTALL_PREFIX=../_install \
                -DCMAKE_BUILD_TYPE=${{ matrix.build-type }} \
                -DCMAKE_CXX_STANDARD=${{ matrix.cxx-standard }} \
                -DCMAKE_CXX_FLAGS=${{ matrix.cxx-flags }} \
                -DCMAKE_VERBOSE_MAKEFILE:BOOL='OFF' \
                -DBUILD_SHARED_LIBS=${{ matrix.build-shared }} \
                -DPYTHON='ON' \
                -DUSE_PYTHON2=${{ matrix.use-python2 }}
        working-directory: _build
      - name: Build
        run: |
          cmake --build . \
                --target install \
                --config ${{ matrix.build-type }}
        working-directory: _build
      - name: Examples
        run: |
          # Make sure we can build the tests when configured as a
          # standalone application linking against the just-installed
          # Imath library.
          cmake ../src/ImathTest \
                -DCMAKE_PREFIX_PATH=../../_install \
                -DCMAKE_BUILD_TYPE=${{ matrix.build-type }} \
                -DCMAKE_CXX_STANDARD=${{ matrix.cxx-standard }} \
                -DCMAKE_CXX_FLAGS=${{ matrix.cxx-flags }}
          cmake --build . \
                --config ${{ matrix.build-type }}
          # Confirm the tests run
          #./bin/ImathTest
          # Confirm the python module loads. Query the site-packages directory and substitute ../_install
          export PYTHONPATH=`python -c "import site; print('../_install%s' % site.USER_SITE[len(site.USER_BASE):])"`          
          python -c "import imath;print(imath.__version__)"
        working-directory: _examples 
      - name: Test
        run: |
          ctest -T Test ${{ matrix.exclude-tests }} \
                -C ${{ matrix.build-type }} \
                --timeout 7200 \
                --output-on-failure \
                -VV
        working-directory: _build

  # ---------------------------------------------------------------------------
  # macOS
  # ---------------------------------------------------------------------------
  
  macos_no_python:
    name: 'macOS 10.15 
      <AppleClang 11.0 
       config=${{ matrix.build-type }}, 
       shared=${{ matrix.build-shared }}, 
       cxx=${{ matrix.cxx-standard }}, 
       docs=${{ matrix.build-docs }}>'
    runs-on: macos-10.15
    strategy:
      matrix:
        build: [1, 2, 3, 4]
        include:
          # C++11
          - build: 1
            build-type: Release
            build-shared: 'ON'
            build-docs: 'ON'
            cxx-standard: 11
            exclude-tests:
          # Debug
          - build: 2
            build-type: Debug
            build-shared: 'ON'
            build-docs: 'OFF'
            cxx-standard: 11
            exclude-tests:
          # C++14
          - build: 3
            build-type: Release
            build-shared: 'ON'
            build-docs: 'OFF'
            cxx-standard: 14
            exclude-tests:
          # Static
          - build: 4
            build-type: Debug
            build-shared: 'OFF'
            build-docs: 'OFF'
            cxx-standard: 11
            exclude-tests:
    steps:
      ## - name: Setup Python
      ##   uses: actions/setup-python@v1
      ##   with:
      ##     python-version: ${{ matrix.python-version }}
      - name: Checkout
        uses: actions/checkout@v2
      - name: Create build directories
        run: |
          mkdir _install
          mkdir _build
          mkdir _examples
      ## - name: Install Dependences
      ##   run: |
      ##     share/ci/scripts/macos/install_boost.sh 
      ##   shell: bash
      - name: Configure
        run: |
          cmake ../. \
                -DCMAKE_INSTALL_PREFIX=../_install \
                -DCMAKE_BUILD_TYPE=${{ matrix.build-type }} \
                -DCMAKE_CXX_STANDARD=${{ matrix.cxx-standard }} \
                -DCMAKE_CXX_FLAGS=${{ matrix.cxx-flags }} \
                -DCMAKE_VERBOSE_MAKEFILE:BOOL='OFF' \
                -DBUILD_SHARED_LIBS=${{ matrix.build-shared }}
        working-directory: _build
      - name: Build
        run: |
          cmake --build . \
                --target install \
                --config ${{ matrix.build-type }} \
                -- -j2
        working-directory: _build
      - name: Examples
        run: |
          # Make sure we can build the tests when configured as a
          # standalone application linking against the just-installed
          # Imath library.
          cmake ../src/ImathTest \
                -DCMAKE_PREFIX_PATH=../../_install \
                -DCMAKE_BUILD_TYPE=${{ matrix.build-type }} \
                -DCMAKE_CXX_STANDARD=${{ matrix.cxx-standard }} \
                -DCMAKE_CXX_FLAGS=${{ matrix.cxx-flags }}
          cmake --build . \
                --config ${{ matrix.build-type }}
          # Confirm the tests run
          ./bin/ImathTest
        working-directory: _examples 
      - name: Test
        run: |
          ctest -T Test ${{matrix.exclude-tests }} \
                -C ${{matrix.build-type}} \
                --timeout 7200 \
                --output-on-failure \
                -VV
        working-directory: _build

  # ---------------------------------------------------------------------------
  # Windows
  # ---------------------------------------------------------------------------
  # TODO: Figure out how to get CMake to use Python 3.7.7.
  #       Boost 1.70.0 will only make boost python for 3.7.
  #       CMake finds Python 3.8 on the VM when configuring, then does not find 
  #       a corresponding boost python38 module. As a result PyIlmbase tests are not 
  #       built or run.
  # TODO: Determine why tests hang in Debug job.
  # TODO: Fix boost script to install from sourceforge.

  windows:
    name: 'Windows 2019 
      <MSVC 16.4 
       config=${{ matrix.build-type }}, 
       shared=${{ matrix.build-shared }}, 
       cxx=${{ matrix.cxx-standard }}, 
       python=OFF, 
       docs=${{ matrix.build-docs }}>'
    runs-on: windows-2019
    strategy:
      matrix:
        build: [1, 3, 4]
        include:
          # C++11, Python 3.7
          - build: 1
            build-type: Release
            build-shared: 'ON'
            build-docs: 'ON'
            cxx-standard: 11
            exclude-tests:
          # Debug -
          ## - build: 2
          ##   build-type: Debug
          ##   build-shared: 'ON'
          ##   build-docs: 'OFF'
          ##   cxx-standard: 11
          ##   exclude-tests:
          # C++14
          - build: 3
            build-type: Release
            build-shared: 'ON'
            build-docs: 'OFF'
            cxx-standard: 14
            exclude-tests:
          # C++14, Static
          - build: 4
            build-type: Release
            build-shared: 'OFF'
            build-docs: 'OFF'
            cxx-standard: 14
            exclude-tests:
          # # Static
          # - build: 4
            # build-type: Release
            # build-shared: 'OFF'
            # build-docs: 'OFF'
            # cxx-standard: 11
            # python-version: 3.7.7
            # boost-version: 1.70.0
            # zlib-version: 1.2.11
            # zlib-lib: zlibstatic.lib
            # exclude-tests: ''
 
    steps:
      # - name: Setup Python
        # uses: actions/setup-python@v1
        # with:
          # python-version: ${{ matrix.python-version }}
      - name: Checkout
        uses: actions/checkout@v2
      - name: Create build directories
        run: |
          mkdir _install
          mkdir _build
        shell: bash
      # - name: Install Dependences
        # run: |
          # share/ci/scripts/windows/install_python.ps1 ${{ matrix.python-version }} $HOME 
          # share/ci/scripts/windows/install_boost.ps1 ${{ matrix.boost-version }} $HOME 3.8
          # share/ci/scripts/windows/install_zlib.ps1 ${{ matrix.zlib-version }} $HOME 
        # shell: powershell
      - name: Configure
        run: |
          cmake ../. \
                -DCMAKE_INSTALL_PREFIX=../_install \
                -DCMAKE_BUILD_TYPE=${{ matrix.build-type }} \
                -DCMAKE_CXX_STANDARD=${{ matrix.cxx-standard }} \
                -DCMAKE_CXX_FLAGS=${{ matrix.cxx-flags }} \
                -DCMAKE_VERBOSE_MAKEFILE:BOOL='OFF' \
                -DBUILD_SHARED_LIBS=${{ matrix.build-shared }}
                # NB: removed trailing slash from these lines
                # -DBOOST_ROOT:FILEPATH=$BOOST_ROOT
                # -DZLIB_ROOT:FILEPATH="$ZLIB_ROOT"
                # -DZLIB_LIBRARY:FILEPATH="$ZLIB_ROOT/lib/${{ matrix.zlib-lib }}"
                # -DPYTHON='ON'
                # -DPython_EXECUTABLE:FILEPATH="$PYTHON_ROOT"
                # -DPython_INCLUDE_DIR:FILEPATH="$PYTHON_ROOT/include"
                # -DPython_LIBRARY:"$PYTHON_ROOT\libs"
        shell: bash
        working-directory: _build
      - name: Build
        run: |
          cmake --build . \
                --target install \
                --config ${{ matrix.build-type }}
        shell: bash
        working-directory: _build
      - name: Test
        run: |
          ctest -T Test ${{ matrix.exclude-tests }} \
                -C ${{ matrix.build-type }} \
                --timeout 7200 \
                --output-on-failure \
                -VV
        shell: bash
        working-directory: _build
